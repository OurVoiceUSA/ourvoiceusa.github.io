{"version":3,"sources":["colors.js","components/Layout.js","components/Type.js","App/routing.web.js","components/Buttons.js","lib/storage.web.js","screens/LoginScreen.js","screens/Dashboard.js","screens/Canvassing.web.js","screens/MainMenu.js","screens/NoMatch.js","App/index.js","serviceWorker.js","index.js"],"names":["colors","alt","brand","primary","transparent","white","black","darkGrey","grey","midGrey","lightGrey","dividerGrey","bgGrey","inputBg","inputGrey","placeholder","Root","styled","SafeAreaView","Content","View","ViewFlex","Row","Space","ViewCenter","RegularText","Text","SemiBoldText","BoldText","Heading","MediumText","MediumStrongText","smallText","css","ButtonText","green","blue","SafariView","MainButtonStyle","AltButtonStyle","Button","props","to","Platform","OS","style","textDecoration","component","ButtonNative","children","onPress","title","ButtonStyle","TouchableOpacity","get","key","a","localStorage","getItem","set","val","setItem","del","removeItem","LoginScreen","refer","state","user","login","width","sm","ret","server","setState","loading","https","match","fetch","method","headers","Authorization","res","sm_oauth_url","Error","status","window","location","href","openURL","url","external","show","fromBottom","Linking","console","warn","Dashboard","name","Canvassing","navigation","MenuButton","menuOpen","MainMenu","logout","NoMatch","pathname","App","componentDidMount","token","split","pop","log","setToken","setTimeout","reload","addEventListener","handleOpenURL","getInitialURL","then","storage","jwt_decode","m","dismiss","this","menu","ActivityIndicator","size","openMenuOffset","isOpen","bounceBackOnOverdraw","exact","path","render","Component","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3717a99f.chunk.js","sourcesContent":["export const colors = {\n  // primary colors\n  alt: \"#FF4E00\",\n  brand: \"#3F51B5\",\n  primary: \"#0099FF\",\n\n  // shades of greys\n  transparent: \"#FFFFFF00\",\n  white: \"#FFFFFF\",\n  black: \"#000000\",\n  darkGrey: \"#333333\",\n  grey: \"#666666\",\n  midGrey: \"#979797\",\n  lightGrey: \"#AAAAAA\",\n  dividerGrey: \"#CDCDCD\",\n  bgGrey: \"#F4F4F4\",\n  inputBg: \"#EFEDED\",\n  inputGrey: \"#ECECEC\",\n  placeholder: \"#706F71\",\n};\n","import styled from \"styled-components/native\";\nimport { colors } from \"../colors\";\n\nexport const Root = styled.SafeAreaView`\n  flex: 1;\n  background: ${colors.brand};\n`;\n\nexport const Content = styled.View`\n  flex: 1;\n  padding: 15px;\n  background: ${colors.white};\n`;\n\nexport const Spacer = styled.View`\n  flex: 1;\n`;\n\nexport const ViewFlex = Spacer;\n\nexport const Row = styled.View`\n  flex-direction: row;\n`;\n\nexport const Space = styled.View`\n  height: 15px;\n`;\n\nexport const ViewCenter = styled.View`\n  align-items: center;\n`;\n","import { colors } from \"../colors\";\nimport styled, { css } from \"styled-components/native\";\n\nexport const RegularText = styled.Text`\n  font-size: 14px;\n  line-height: 19px;\n`;\n\nexport const SemiBoldText = styled(RegularText)``;\n\nexport const BoldText = styled(RegularText)``;\n\nexport const ExtraBoldText = styled(RegularText)``;\n\nexport const Heading = styled(BoldText)`\n  color: ${colors.darkGrey};\n  font-size: 22px;\n  line-height: 35px;\n  text-align: center;\n`;\n\nexport const ScreenTitle = styled(BoldText)`\n  color: ${colors.darkGrey};\n  font-size: 18px;\n`;\n\nexport const TextButton = styled(SemiBoldText)`\n  color: ${colors.grey};\n  font-size: 15px;\n`;\n\nexport const MediumText = styled(RegularText)`\n  color: ${colors.grey};\n`;\n\nexport const MediumSemiStrongText = styled(SemiBoldText)`\n  color: ${colors.darkGrey};\n`;\n\nexport const MediumStrongText = styled(BoldText)`\n  color: ${colors.darkGrey};\n`;\n\nexport const SmallHeading = styled(BoldText)`\n  font-size: 16px;\n  line-height: 22px;\n  color: ${colors.darkGrey};\n`;\n\nconst smallText = css`\n  font-size: 13px;\n  line-height: 18px;\n  letter-spacing: -0.014px;\n  color: ${colors.grey};\n`;\n\nexport const SmallText = styled(RegularText)`\n  ${smallText}\n`;\n\nexport const SmallSemiStrongText = styled(SemiBoldText)`\n  ${smallText}\n  color: ${colors.darkGrey};\n`;\n\nexport const SmallStrongText = styled(BoldText)`\n  ${smallText}\n  color: ${colors.darkGrey};\n`;\n\nexport const Price = styled(MediumStrongText)`\n  color: ${colors.green};\n`;\n\nexport const Link = styled(MediumStrongText)`\n  color: ${colors.blue};\n`;\n\nexport const ButtonText = styled(MediumStrongText)`\n  color: ${colors.white};\n  font-weight: 700;\n`;\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nconst SafariView = () => {};\n\nexport {\n  Router,\n  Switch,\n  Route,\n  Link,\n  SafariView,\n};\n","import * as React from \"react\";\nimport { colors } from \"../colors\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport styled from \"styled-components/native\";\nimport { ButtonText } from \"../components/Type\";\n//import Icon from \"react-native-vector-icons/FontAwesome\";\n\nimport { Link } from '../App/routing';\n\nconst MainButtonStyle = styled.View`\n  background: ${colors.primary},\n  padding: 10px;\n  margin: 5px;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  border-radius: 5px;\n`;\n\nconst AltButtonStyle = styled(MainButtonStyle)`\n  background: ${colors.alt};\n`;\n\nexport const Button = (props) => {\n  if (props.to) {\n    if (Platform.OS === 'web') return (<Link to={props.to} style={{ textDecoration: 'none' }}><ButtonNative {...props} /></Link>);\n    else return (<Link component={ButtonNative} {...props} />);\n  }\n  return (<ButtonNative {...props} />);\n};\n\nconst ButtonNative = ({alt, children, onPress, title, to}) => {\n  const ButtonStyle = alt ? AltButtonStyle : MainButtonStyle;\n  return (\n    <TouchableOpacity onPress={onPress}>\n      <ButtonStyle>\n        <ButtonText>{title ? title : children}</ButtonText>\n      </ButtonStyle>\n    </TouchableOpacity>\n  );\n}\n","\nexport async function get(key) {\n  return localStorage.getItem(key);\n}\n\nexport async function set(key, val) {\n  localStorage.setItem(key, val);\n}\n\nexport async function del(key) {\n  localStorage.removeItem(key);\n}\n","import React from \"react\";\nimport { Platform, Text, Linking } from \"react-native\";\n\nimport { Root, Content, ViewCenter, Space } from \"../components/Layout\";\nimport { Button } from \"../components/Buttons\";\nimport { Heading } from \"../components/Type\";\nimport { SafariView } from '../App/routing';\nimport * as storage from '../lib/storage';\n\nexport const LoginScreen = ({ refer }) => {\n  const { user } = refer.state;\n\n  return (\n    <Root>\n      <Content>\n        <Heading>Welcome to Hello Voter!</Heading>\n        <ViewCenter>\n          <Button\n            title=\"Log in with Facebook\"\n            onPress={() => login(refer, \"fm\")}\n          />\n          <Button\n            title=\"Log in with Google\"\n            onPress={() => login(refer, \"gm\")}\n            alt={true}\n          />\n          <Space />\n          <Text>Built with ❤️ by Our Voice USA</Text>\n          <Space />\n          <Text>Not for any candidate or political party.</Text>\n          <Space />\n          <Text>Copyright (c) 2020, Our Voice USA. All rights reserved.</Text>\n          <Space />\n          <Text style={{width: 350}}>\n            This program is free software; you can redistribute it and/or\n            modify it under the terms of the GNU Affero General Public License\n            as published by the Free Software Foundation; either version 3\n            of the License, or (at your option) any later version.\n          </Text>\n        </ViewCenter>\n      </Content>\n    </Root>\n  );\n};\n\nlet state = {}\n\nasync function login (refer, sm) {\n  let ret = false;\n  let orgId\n  let token\n  let server = process.env.NODE_ENV === 'development' ? 'localhost:8080' : 'gotv.ourvoiceusa.org';\n\n  refer.setState({loading: true});\n\n  let https = true;\n  if (server.match(/:8080$/)) https = false;\n\n  try {\n    let res = await fetch('http'+(https?'s':'')+'://' + server + '/'+(orgId?orgId+'/':'')+'api/v1/hello', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + (token ? token : 'of the one ring'),\n        'Content-Type': 'application/json'\n      },\n    });\n\n    let sm_oauth_url = res.headers.get('x-sm-oauth-url');\n\n    if (!sm_oauth_url) throw new Error(\"Missing required header.\");\n\n    switch (res.status) {\n    case 200: ret = true; break;\n    case 400: break; // TODO: rm jwt?\n    case 401:\n      if (Platform.OS === 'web') {\n        window.location.href = sm_oauth_url + '/'+sm+'/?app=hellovoter'+(https?'':'&local=true');\n      } else {\n        openURL(sm_oauth_url+'/'+sm)\n      }\n      break;\n    default: break;\n    }\n  } catch (e) {\n  }\n\n  return ret;\n}\n\nexport async function openURL(url, external) {\n  try {\n    // Use SafariView in-line to the app on iOS if it's an http URL\n    if (url.match(/^http/) && Platform.OS === 'ios' && !external) {\n      SafariView.show({\n        url: url,\n        fromBottom: true,\n      });\n    } else {\n      await Linking.openURL(url);\n    }\n    return true;\n  } catch (e) {\n    console.warn(e);\n  }\n  return false;\n}\n","import React from \"react\";\nimport { Text, View } from 'react-native';\n\nimport { Heading, MediumText } from \"../components/Type\";\nimport { ViewCenter, ViewFlex, Row, Space } from '../components/Layout';\nimport { Button } from \"../components/Buttons\";\nimport { Link } from '../App/routing';\n\nexport const Dashboard = ({ refer }) => {\n  const { user } = refer.state;\n\n  return (\n    <View>\n      <Heading>Welcome, {user.name}</Heading>\n      <Space />\n      <ViewCenter>\n        <MediumText>You've knocked on 14 doors.</MediumText>\n        <MediumText>You've sent 18 postcards.</MediumText>\n        <MediumText>You've made 35 phone calls.</MediumText>\n      </ViewCenter>\n      <ViewFlex />\n      <Heading>What do you want to do?</Heading>\n      <Row>\n        <ViewFlex>\n          <Button>\n            Phone Banking\n          </Button>\n          <Button>\n            Post Cards\n          </Button>\n        </ViewFlex>\n        <ViewFlex>\n          <Button to=\"/canvassing\">\n            Canvassing\n          </Button>\n          <Button>\n            Your Reps\n          </Button>\n        </ViewFlex>\n      </Row>\n    </View>\n  );\n};\n","import React from \"react\";\nimport { Text } from 'react-native';\nimport { Root, Content } from \"../components/Layout\";\nimport { Button } from \"../components/Buttons\";\n\nimport { Link } from '../App/routing';\n\nexport const Canvassing = ({ navigation }) => {\n  return (\n    <Root>\n      <Content>\n        <Text>Please download the mobile app</Text>\n        <Button to=\"/\" title=\"Home\" />\n      </Content>\n    </Root>\n  );\n};\n","import React from 'react';\nimport { Text, View } from 'react-native';\n\nimport { Root, Content } from '../components/Layout';\nimport { Button } from \"../components/Buttons\";\n\nconst MenuButton = (props) => (\n  <Button to={props.to} onPress={() => props.refer.setState({menuOpen: false})} {...props} />\n);\n\nexport const MainMenu = ({refer}) => {\n  return (\n    <Root>\n      <Content>\n        <MenuButton refer={refer} to=\"/\">Dashboard</MenuButton>\n        <MenuButton refer={refer} to=\"/canvassing\">Canvassing</MenuButton>\n        <MenuButton refer={refer} to=\"/phonebank\">Phone Banking</MenuButton>\n        <MenuButton refer={refer} to=\"/settings\">Settings</MenuButton>\n        <MenuButton refer={refer} to=\"/help\">Help</MenuButton>\n        <MenuButton refer={refer} to=\"/about\">About</MenuButton>\n        <MenuButton refer={refer}\n          alt={true}\n          onPress={() => refer.logout()}>\n          Logout\n        </MenuButton>\n      </Content>\n    </Root>\n  );\n}\n","import React from 'react';\nimport { Text, View } from 'react-native';\n\nimport { Button } from \"../components/Buttons\";\n\nexport const NoMatch = ({ location }) => (\n  <View>\n    <Text>OOOPS!!</Text>\n    <Text></Text>\n    <Text>We can't seem to find the screen you're looking for:</Text>\n    <Text></Text>\n    <Text>{location.pathname}</Text>\n    <Text></Text>\n    <Button to=\"/\" title=\"Back to Dashboard\" />\n  </View>\n);\n","import React, { Component } from \"react\";\nimport { ActivityIndicator, Linking, Platform, Text, TouchableOpacity } from \"react-native\";\nimport SideMenu from 'react-native-side-menu';\nimport jwt_decode from 'jwt-decode';\n\nimport { LoginScreen, Canvassing, Dashboard, MainMenu, NoMatch } from '../screens';\nimport { Router, Switch, Route, Link, SafariView } from './routing';\nimport { Root, Content, Space, ViewCenter } from '../components/Layout';\nimport * as storage from '../lib/storage';\nimport { colors } from '../colors';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      loading: true,\n      token: null,\n      user: null,\n      menuOpen: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    let token;\n\n    if (Platform.OS === 'web') {\n      try {\n        if (window.location.href.match(/\\/jwt\\//)) {\n          token = window.location.href.split('/').pop();\n          console.log('got token: ', token);\n          if (token) {\n            await this.setToken(token);\n            setTimeout(() => {window.location.href = '/hellovoter/#/'}, 500);\n            setTimeout(() => {window.location.reload()}, 1500);\n            return;\n          }\n        }\n      } catch(e) {\n        console.warn(e);\n      }\n    } else {\n      // Add event listener to handle OAuthLogin:// URLs\n      Linking.addEventListener('url', this.handleOpenURL);\n      // Launched from an external URL\n      Linking.getInitialURL().then((url) => {\n        if (url) this.handleOpenURL({ url });\n      });\n    }\n\n    token = await storage.get('jwt');\n\n    if (token) this.setToken(token);\n\n    this.setState({loading: false});\n  }\n\n  logout = async () => {\n    storage.del('jwt');\n    this.setState({user: null, menuOpen: false});\n  }\n\n  setToken = async (token) => {\n    try {\n      let user = jwt_decode(token);\n      await storage.set('jwt', token);\n      this.setState({token, user});\n    } catch (e) {\n      storage.del('jwt');\n    }\n  }\n\n  handleOpenURL = async ({ url }) => {\n    // Extract jwt token out of the URL\n    const m = url.match(/jwt=([^#]+)/);\n\n    if (m) this.setToken(m[1]);\n\n    if (Platform.OS === 'ios') {\n      SafariView.dismiss();\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const { loading, menuOpen, user } = this.state;\n\n    const menu = (<MainMenu refer={this} />);\n\n    if (loading) return (\n      <Root>\n        <Content>\n          <ViewCenter>\n            <Text>Loading HelloVoter...</Text>\n            <Space />\n            <ActivityIndicator size=\"large\" />\n          </ViewCenter>\n        </Content>\n      </Root>\n    );\n    if (!user) return (<Router><Route path=\"/\" render={() => <LoginScreen refer={this} />} /></Router>);\n\n    return (\n      <Router>\n        <SideMenu menu={menu} openMenuOffset={200} isOpen={menuOpen} bounceBackOnOverdraw={false}>\n        <Root>\n          <Content>\n            <TouchableOpacity onPress={() => this.setState({menuOpen: true})}>\n              <Text>MENU</Text>\n            </TouchableOpacity>\n              <Switch>\n                <Route exact={true} path=\"/\" render={() => <Dashboard refer={this} />} />\n                <Route path=\"/canvassing\" render={() => <Canvassing refer={this} />} />\n                <Route component={NoMatch} />\n              </Switch>\n            </Content>\n          </Root>\n        </SideMenu>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}